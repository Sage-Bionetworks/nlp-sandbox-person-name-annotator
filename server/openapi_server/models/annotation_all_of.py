# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AnnotationAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, note_id=None, start=None, length=None, text=None):  # noqa: E501
        """AnnotationAllOf - a model defined in OpenAPI

        :param note_id: The note_id of this AnnotationAllOf.  # noqa: E501
        :type note_id: int
        :param start: The start of this AnnotationAllOf.  # noqa: E501
        :type start: int
        :param length: The length of this AnnotationAllOf.  # noqa: E501
        :type length: int
        :param text: The text of this AnnotationAllOf.  # noqa: E501
        :type text: str
        """
        self.openapi_types = {
            'note_id': int,
            'start': int,
            'length': int,
            'text': str
        }

        self.attribute_map = {
            'note_id': 'noteId',
            'start': 'start',
            'length': 'length',
            'text': 'text'
        }

        self._note_id = note_id
        self._start = start
        self._length = length
        self._text = text

    @classmethod
    def from_dict(cls, dikt) -> 'AnnotationAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Annotation_allOf of this AnnotationAllOf.  # noqa: E501
        :rtype: AnnotationAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note_id(self):
        """Gets the note_id of this AnnotationAllOf.

        The note ID  # noqa: E501

        :return: The note_id of this AnnotationAllOf.
        :rtype: int
        """
        return self._note_id

    @note_id.setter
    def note_id(self, note_id):
        """Sets the note_id of this AnnotationAllOf.

        The note ID  # noqa: E501

        :param note_id: The note_id of this AnnotationAllOf.
        :type note_id: int
        """

        self._note_id = note_id

    @property
    def start(self):
        """Gets the start of this AnnotationAllOf.

        The position of the first character  # noqa: E501

        :return: The start of this AnnotationAllOf.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AnnotationAllOf.

        The position of the first character  # noqa: E501

        :param start: The start of this AnnotationAllOf.
        :type start: int
        """

        self._start = start

    @property
    def length(self):
        """Gets the length of this AnnotationAllOf.

        The length of the annotation  # noqa: E501

        :return: The length of this AnnotationAllOf.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this AnnotationAllOf.

        The length of the annotation  # noqa: E501

        :param length: The length of this AnnotationAllOf.
        :type length: int
        """

        self._length = length

    @property
    def text(self):
        """Gets the text of this AnnotationAllOf.

        The string annotated  # noqa: E501

        :return: The text of this AnnotationAllOf.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AnnotationAllOf.

        The string annotated  # noqa: E501

        :param text: The text of this AnnotationAllOf.
        :type text: str
        """

        self._text = text
